<?php

/* CURRENTLY THIS STUFF IS UNDER CONSTRUCTION */

/*
 *  Copyright (c) 1998-2012 KE Software Pty Ltd
 */


if (!isset($WEB_ROOT))
	$WEB_ROOT = dirname(dirname(dirname(realpath(__FILE__))));

require_once ($WEB_ROOT . '/objects/lib/webinit.php');
require_once ($WEB_ROOT . '/objects/common/BaseWebServiceObject.php');
require_once ($WEB_ROOT . "/objects/common/DataCacher.php");
require_once ($WEB_ROOT . '/objects/common/Transformation.php');

/**
 * Class WebServiceObject
 *
 * Use as the base of complicated services that require data caching and
 * transformation operations
 *
 * @package EMuWebServices
 */
class WebServiceObject extends BaseWebServiceObject
{

	var $serviceName = "WebServiceObject";
	var $_headers = array();
	var $_cacher = null;

	function WebServiceObject($backendType='',$webRoot='',$webDirName='',$debugOn=0)
	{
		parent::BaseWebServiceObject($backendType,$webRoot,$webDirName,$debugOn);
		$this->_cacher = new DataCacher($this->backendType,$this->webRoot,$this->webDirName,$this->debugOn);
	}

	function describe()
	{
		return	
			"A WebService Object is a BaseWebServiceObject that has\n".
			"caching and response formatting ability\n\n".  
			Parent::describe();
	}

	/**
	 * Display how a service can be called - experimental - may drop
	 */
	function useage($service='UNDEFINED',$useage=Array(),$msg='')
	{
		foreach ($useage as $argument => $explanation)
			$options[] = "\t\t<option form='$argument'>$explanation</option>";
		$useage = implode("\n",$options);

		header("Content-type: text/xml");
		print <<<XML
<emuWebServiceDescription>
	<service>$service</service>	
	<emuweb>$this->webDirName</emuweb>
	<description>
$msg
	</description>
	<useage>
$useage
	</useage>
</emuWebServiceDescription>
XML;
	}


	/**
	 * System to save request hash.  This can be retrieved at later time
	 * using identifier as a key.  Uses DataCacher
	 */
	function saveCallingParameters($identifier,$request)
	{
		$this->_cacher = new DataCacher($this->backendType,$this->webRoot,$this->webDirName);

		$status = Array();

		if (count($request))
			ksort($request);
		foreach ($request as $param => $value)
		{
			if (is_array($value))
				foreach ($value as $multiValue)
				{
					if (get_magic_quotes_gpc())
						$multiValue = stripslashes($multiValue);
					$status[] = "${param}[] = $multiValue";
				}	
			else	
			{
				if (get_magic_quotes_gpc())
					$value = stripslashes($value);
				$status[] = "$param = $value";
			}
		}
		$this->_cacher->save($identifier,implode("\n",$status));
		return $this->_cacher->getUrlOfIndex($identifier);
	}

	/**
	 * retrieve saved hash data.  Existing parameters in passed hash will
	 * override those retrieved from cache.  Uses DataCacher
	 */
	function retrieveCallingParameters($identifier,$currentParameters)
	{
		$request = array();
		if ($this->_cacher->exists($identifier))
		{
			$state = $this->_cacher->retrieve($identifier);
			foreach (preg_split('/\n/',$state) as $args)
			{
				preg_match('/^(.+?)\s*=\s*(.*)$/',$args,$match);
				if (! isset($ignores[$match[1]]))
					if (preg_match('/(.+)\[\]$/',$match[1],$name))
						$request[$name[1]][] = $match[2];
					else
						$request[$match[1]] = $match[2];
			}

			// override any parameters cached if new values passed
			if ($currentParameters)
			{
				foreach ($currentParameters as $param => $value)
				{
					$request[$param] = $value;
				}
			}
			return $request;
		}
		return null;
	}

	/**
	 * Generate a map and send back Mapper XML.  Not implemented yet
	*/
	function sendMap($data)
	{
		$this->_log("<action>sendMap</action>");
		return  "<xml><!--Cannot do sendMap yet ! (see sendMap in WebServices.php) --></xml>";
	}
	
	/**
	 * Send a result set to the client with the supplied styelsheet
	 * linked in.
	 */
	function sendClientXslt($stylesheet,$data)
	{

		$stylesheet = urldecode($stylesheet);
		$this->_log("<action>sendClientXslt</action>");
		return  "<?xml version='1.0' encoding='ISO-8859-1' ?>\n".
                        "<?xml-stylesheet type='text/xsl' ".
                        " href='$stylesheet'?>\n$data";
	}

	/**
	 * Send the generated results back to the client.
	 */
	function sendResults()
	{
		$this->_log("<action>sendResults</action>");
		return "<xml/>";
	}

	/**
	 * Used to call any Transformation operations on data generated by the
	 * service
	 */
	function formatOutput($request,$rawData=false,$setHeaders=true)
	{
		// calls appropriate data massaging process

		$this->_headers[] = "Cache-Control: no-cache";
		$this->_headers[] = "Pragma: no-cache";
		$this->_headers[] = "Expires: 0";


		$xmlResults = $this->sendResults();

		if ($rawData)
			return $xmlResults;
		
		if (isset($request['map']))
			return $this->sendMap($xmlResults);
		
		if (isset($request['stylesheet']))
		{
			if (isset($request['transform']) && $request['transform'])
			{
				// transform using template or server side xslt
				$factory = new TransformationFactory();
				$transform = $factory->getInstance($request['transform']);
				return $transform->transform($xmlResults, $request['stylesheet'],$setHeaders);
			}
			else
			{
				// client side XSLT
				$this->_headers[] = "Content-type: text/xml";
				return  $this->sendClientXslt($request['stylesheet'],$xmlResults);
			}
		}

		// no processing requested - spit back raw xml

		$this->_headers[] = "Content-type: text/xml";
		return $xmlResults;
	}

}


if (isset($_REQUEST['test']))
{
	$serviceFile = basename($_SERVER['PHP_SELF']);

	if (basename($serviceFile) == "WebServiceObject.php")
	{
		$webObject = new WebServiceObject();
		$webObject->test();
	}
}

?>
