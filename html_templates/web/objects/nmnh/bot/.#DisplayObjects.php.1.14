<?php
/*
*  Copyright (c) KE Software Pty Ltd - 2001
*/

if (!isset($WEB_ROOT))
	$WEB_ROOT = dirname(dirname(dirname(dirname(realpath(__FILE__)))));

require_once ($WEB_ROOT . '/objects/lib/webinit.php');
require_once ($LIB_DIR . 'BaseDisplayObjects.php');

// added for value compare
require_once ($LIB_DIR . 'texquery.php');
require_once ($LIB_DIR . 'media.php');
require_once($WEB_ROOT . '/objects/common/RecordExtractor.php');
 
$GLOBALS['STRINGS_DIR'] = $WEB_ROOT . "/objects/" . $GLOBALS['BACKEND_TYPE'] . "/" . $GLOBALS['DEPARTMENT'] . "/strings/";

class
NmnhBotanyStandardDisplay extends BaseStandardDisplay
{
	// Keep Aspect Ratio for image on display page
        var $KeepAssociatedImagesAspectRatio = 1;

	// Set default in the constructor
	function
	NmnhBotanyStandardDisplay()
	{
		$this->BaseStandardDisplay();
		
		// Values used below - we only want to get them once
		$recEx = new RecordExtractor();
		$recEx->ExtractFields
		(
			array
			(
				'IdeFiledAsRef',
				'NotNmnhText0',
				'NotNmnhType_tab',
                                'NotNmnhWeb_tab',
			)
		);

		$filedAsTaxonRef = $recEx->FieldAsValue("IdeFiledAsRef");

		$filedAsQualifiedName = new Field;
		$filedAsQualifiedName->ColName = 'IdeFiledAsQualifiedNameWeb';

		$filedAsIdentifiedBy = new Field;
		$filedAsIdentifiedBy->ColName = 'IdeFiledAsIdentifiedByLocal';

		$filedAsIdentificationDate = new Field;
		$filedAsIdentificationDate->ColName = 'IdeFiledAsDateIdentified';

		$filedAsQualifiedNameTable = new Table;
		$filedAsQualifiedNameTable->Name = 'IdeFiledAsQualifiedName';
                $filedAsQualifiedNameTable->Headings = array('', 'Identified By', 'Identification Date');
                $filedAsQualifiedNameTable->Columns = array($filedAsQualifiedName, $filedAsIdentifiedBy, $filedAsIdentificationDate);
		

		// Other identifications name
                $otherQualifiedName = new Field;
                $otherQualifiedName->ColName = 'IdeOtherQualifiedNameWeb_tab';

                $otherDateIdentified = new Field;
                $otherDateIdentified->ColName = 'IdeOtherDateIdentifiedWeb0';

                $otherIdentifiedBy = new Field;
                $otherIdentifiedBy->ColName = 'IdeOtherIdentifiedByWebRef->eparties->NamBriefName';

                $otherTaxonomicNamesTable = new Table;
                $otherTaxonomicNamesTable->Name = 'IdeOtherQualifiedName_tab';
                $otherTaxonomicNamesTable->Headings = array('', 'Identified By', 'Identification Date');
                $otherTaxonomicNamesTable->Columns = array($otherQualifiedName, $otherIdentifiedBy, $otherDateIdentified);

		// common name & language table
		$comName = new Field;
		$comName->ColName = 'IdeFiledAsRef->etaxonomy->ComName_tab';

		$language = new Field;
		$language->ColName = 'IdeFiledAsRef->etaxonomy->ComLanguage_tab';

		$commonName = new Table;
		$commonName->Name = 'IdeFiledAsRef->etaxonomy->ComName_tab';
		$commonName->Headings = array('Name', 'Language');
		$commonName->Columns = array($comName, $language);
		
		// other numbers & other numbers value table
		$otherNumbersType = new Field;
		$otherNumbersType->ColName = 'CatOtherNumbersType_tab';

		$otherNumbersValue = new Field;
		$otherNumbersValue->ColName = 'CatOtherNumbersValue_tab';

		$otherNumbers = new Table;
		$otherNumbers->Name = 'CatOtherNumbersType_tab';
		$otherNumbers->Headings = array('Type', 'Value');
		$otherNumbers->Columns = array($otherNumbersType, $otherNumbersValue);

		// other counts and other counts value table
		$OtherCountsType = new Field;
		$OtherCountsType->ColName = 'CatOtherCountsType_tab';

		$OtherCountsValue = new Field;
		$OtherCountsValue->ColName = 'CatOtherCountsValue_tab';

		$OtherCountsTable = new Table;
		$OtherCountsTable->Name = 'CatOtherCountsType_tab';
		$OtherCountsTable->Headings = array('Type', 'Value');
		$OtherCountsTable->Columns = array($OtherCountsType, $OtherCountsValue);

		// date visited from and date visited to formatting	
		$dateCollected = new FormatField;
		$dateCollected->Name = "Date Collected (dd/mm/yyyy)";
		$ceref = get('BioEventSiteRef', 'ecatalogue', $this->IRN);
		if (filled('ColDateVisitedFrom', 'ecollectionevents', $ceref) &&
		    filled('ColDateVisitedTo', 'ecollectionevents', $ceref) &&
		    filled('ColDateVisitedConjunction', 'ecollectionevents', $ceref))
			{
				if (get('ColDateVisitedFrom', 'ecollectionevents', $ceref) != get('ColDateVisitedTo', 'ecollectionevents', $ceref))
				{
					$dateCollected->Format = "{BioEventSiteRef->ecollectionevents->ColDateVisitedFrom}";
					$dateCollected->Format .= " {BioEventSiteRef->ecollectionevents->ColDateVisitedConjunction} ";
					$dateCollected->Format .= "{BioEventSiteRef->ecollectionevents->ColDateVisitedTo}";
				}
				else
					$dateCollected->Format = "{BioEventSiteRef->ecollectionevents->ColDateVisitedFrom}";
			}
		elseif (filled('ColDateVisitedFrom', 'ecollectionevents', $ceref) && filled('ColDateVisitedTo', 'ecollectionevents', $ceref))
			{
				if (get('ColDateVisitedFrom', 'ecollectionevents', $ceref) != get('ColDateVisitedTo', 'ecollectionevents', $ceref))
				{
					$dateCollected->Format = "{BioEventSiteRef->ecollectionevents->ColDateVisitedFrom}";
					$dateCollected->Format .= " - ";
					$dateCollected->Format .= "{BioEventSiteRef->ecollectionevents->ColDateVisitedTo}";
				}
				else
					$dateCollected->Format = "{BioEventSiteRef->ecollectionevents->ColDateVisitedFrom}";
			}
		else
			$dateCollected->Format = "{BioEventSiteRef->ecollectionevents->ColDateVisitedFrom}";
	
		// elevation from & elevation to formatting	
		$elevation = new FormatField;
		$elevation->Name = "Elevation";
		
		$elevFromFlag = "";
		$elevToFlag = "";
		if (filled('TerElevationFromOrig', 'ecollectionevents', $ceref)) 
			$elevFromFlag = get('TerElevationFromOrig', 'ecollectionevents', $ceref);
		if (filled('TerElevationToOrig', 'ecollectionevents', $ceref))
			$elevToFlag = get('TerElevationToOrig', 'ecollectionevents', $ceref);

		if ($elevFromFlag != "" || $elevToFlag != "")
		{
			$elevFrom = "";
			$elevTo = "";
			$elevUnit = "";
			$elevFromMod = "";
			$elevToMod = "";

			if (filled('TerElevationFromModifier', 'ecollectionevents', $ceref))
			{
				$elevFromMod = get('TerElevationFromModifier', 'ecollectionevents', $ceref);
			}
			if (filled('TerElevationToModifier', 'ecollectionevents', $ceref))
			{
				$elevToMod = get('TerElevationToModifier', 'ecollectionevents', $ceref);
			}

			// get elevations 
			if ($elevFromFlag != "")
			{
				if (! $elevFromFlag)
				{
					$elevFrom = get('TerElevationFromMet','ecollectionevents', $ceref);
					$elevUnit = "m";	
				}
				else
				{
					$elevFrom = get('TerElevationFromFt','ecollectionevents', $ceref);
					$elevUnit = "ft";	
				}
				if ($elevFromMod != "")
				{
					$elevFrom = "$elevFromMod $elevFrom";
				}
			}
			if ($elevToFlag != "")
			{
				if (! $elevToFlag)
				{
					$elevTo = get('TerElevationToMet','ecollectionevents', $ceref);
					if ($elevUnit == "")
					{
						$elevUnit = "m";
					}
				}
				else
				{
					$elevTo = get('TerElevationToFt','ecollectionevents', $ceref);
					if ($elevUnit == "")
					{
						$elevUnit = "ft";
					}
				}
				if ($elevToMod != "")
				{
					$elevTo = "$elevToMod $elevTo";
				}
			}
			if ($elevFrom == $elevTo)
			{
				$elevTo = "";
			}
			
			if ($elevFrom != "" && $elevTo != "")
			{
				$elevation->Format = $elevFrom;
				$elevation->Format .= " - ";
				$elevation->Format .= $elevTo;
				$elevation->Format .= " " . $elevUnit;
			}
			elseif ($elevFrom != "" && $elevTo == "")
			{
				$elevation->Format = $elevFrom;
				$elevation->Format .= " " . $elevUnit;
			}
			elseif ($elevFrom == "" && $elevTo != "")
			{
				$elevation->Format .= $elevTo;
				$elevation->Format .= " " . $elevUnit;
			}
		}
		
		// catalogue number, suffix & prefix formatting
		$catNumber = new FormatField;
		$catNumber->Name = "Catalog Number";
		if (filled('CatSuffix', 'ecatalogue', $this->IRN))
			$catNumber->Format = "{CatPrefix}{CatNumber}-{CatSuffix}";
		else
			$catNumber->Format = "{CatPrefix}{CatNumber}";

		// authority & status table
		$authority = new Field;
                $authority->ColName = 'IdeFiledAsRef->etaxonomy->GeoAuthoritySummaryData_tab';

		$geoStatus = new Field;
                $geoStatus->ColName = 'IdeFiledAsRef->etaxonomy->GeoStatus_tab';

                $authorityTable = new Table;
                $authorityTable->Name = 'Conservation Status';
                $authorityTable->Headings = array('', 'Status');
                $authorityTable->Columns = array($authority, $geoStatus);
	
		// primary citation and type status of primary citation(?)	

		 // Citations
                $citTaxonLocal = new Field;
                $citTaxonLocal->ColName = 'CitTaxonRef_tab->etaxonomy->ClaScientificName';

                $citTypeStatus = new Field;
                $citTypeStatus->ColName = 'CitTypeStatus_tab';

                $citPrimaryCitedIn = new Field;
                $citPrimaryCitedIn->ColName = 'CitTaxonRef_tab->etaxonomy->PriCitedInRef->ebibliography->SummaryData';

                $typeCitations = new Table;
                $typeCitations->Name = 'TypeCitations';
                $typeCitations->Columns = array($citTaxonLocal, $citTypeStatus, $citPrimaryCitedIn);
                // end Citations

		$notesText = $recEx->MultivalueFieldAsArray("NotNmnhText0");
		$webtype = $recEx->MultivalueFieldAsArray("NotNmnhType_tab");
		$webnotes = $recEx->MultivalueFieldAsArray("NotNmnhWeb_tab");
		$notesDisplay = "";

		for ($i = 0;$i < count($notesText); $i++)
		{
			if (strtolower($webnotes[$i]) == "yes" ||
			    strtolower($webtype[$i]) == "web display")
			{
				$notesDisplay .= $notesText[$i] . "\n";
			}
		}

		$notes = new FormatField;
                $notes->Name = 'NotNmnhText0';
                $notes->Format = $notesDisplay;

		$this->Fields = array
		(
			'IdeFiledAsQualifiedNameWeb',
			'CatBarcode',
			$catNumber,
			'CatCatalog',
			'CatCollectionName_tab',
			'IdeFiledAsRef->etaxonomy->ClaPhylum',
			'IdeFiledAsRef->etaxonomy->ClaOrder',
			'IdeFiledAsRef->etaxonomy->ClaFamily',
			'IdeFiledAsRef->etaxonomy->ClaSubfamily',
			$filedAsQualifiedNameTable,
			$otherTaxonomicNamesTable,
			$commonName,
			$typeCitations,
			//$citationTypeStatus,
			'IdeFiledAsRef->etaxonomy->CitVerificationDegree_tab',
			'BioEventSiteRef->ecollectionevents->ColParticipantString',
			'BioPrimaryCollNumber',
			$dateCollected,
			'BioEventSiteRef->ecollectionevents->LocBiogeographicalRegion',
			'BioEventSiteRef->ecollectionevents->LocCountry',
			'BioEventSiteRef->ecollectionevents->LocProvinceStateTerritory',
			'BioEventSiteRef->ecollectionevents->LocDistrictCountyShire',
			'BioEventSiteRef->ecollectionevents->LocPreciseLocation',
			'BioEventSiteRef->ecollectionevents->LocIslandName',
			'BioEventSiteRef->ecollectionevents->LatPreferredCentroidLatitude',
			'BioEventSiteRef->ecollectionevents->LatPreferredCentroidLongitude',
			$authorityTable,
			$elevation,
			'BioMicrohabitatDescription',
			$OtherCountsTable,
			$otherNumbers,
			'BotCultivated',
			$notes,
			'BotRecentFossil',
		);

		$this->HeaderField = 'IdeFiledAsQualifiedNameWeb';
		$this->Database = 'enmnh';
		$this->SuppressEmptyFields = 0;
		$this->DisplayImage = 0;
	}

	function
	Show()
	{
		/*
		**  The Show() method is resposible for sourcing the Language strings
		**  ($this->_STRINGS) and performing the query before calling display().
		*/
		$this->sourceStrings();
		$this->setupSchema();

		if (!isset($this->IRN))
		{
			WebDie('Invalid IRN', 'BaseDisplayObject');
		}

		// we don't grab the Multimedia ref if we are already in Multimedia
		if ($this->Database == "emultimedia")
		{
			$this->_buildSelectArray(array('irn', 'SummaryData'));
		}
		else
		{
			$this->_buildSelectArray(array('irn', 'SummaryData', 'MulMultiMediaRef_tab', 'AdmPublishWebNoPasswordLocal_tab'));
		}
		$this->_buildSelectArray($this->Fields);
		$this->_buildSelectArray($this->AdditionalFields);

		if (count($this->AdditionalFields) > 0)
		{
			$this->Fields = array_merge($this->Fields, $this->AdditionalFields);
		}

		$qry = new ConfiguredQuery;
		$qry->SelectedLanguage = $this->LanguageData;
		$qry->Intranet = $this->Intranet;
		$qry->Select = $this->selectArray;
			

		$qry->From = $this->Database;
		$qry->Where = 'irn=' . $this->IRN;
		$result = $qry->Fetch();

		if (!isset($result[0]->irn_1) || $result[0]->irn_1 == '')
		{
			print "<center>";
			print "<h2>";
			PPrint($this->_STRINGS['NO RESULTS'], $this->FontFace, '', $this->BodyTextColor);
			print"</h2>\n";
			print "<h3>";
			PPrint($this->_STRINGS['GO BACK'], $this->FontFace, '', $this->BodyTextColor);
			print "</h3>\n";
			print '<br /></center>';
			return;
		}

		$this->record = $result[0];

		// Now we call the display function
		$this->display();
	}

	function
	display()
	{

		$widthAttrib = '';
		if ($this->Width != '')
			$widthAttrib 	= 'width="' . $this->Width . '"' ;
		$bodyColorAttrib = '';
		if ($this->BodyColor != '')
			$bodyColorAttrib	= 'bgcolor=' . $this->BodyColor;
		$bodyTextColorAttrib = '';
		if ($this->BodyTextColor != '')
			$bodyTextColorAttrib	= 'color=' . $this->BodyTextColor;
		$highlightColorAttrib = '';
		if ($this->HighlightColor != '')
			$highlightColorAttrib	= 'bgcolor=' . $this->HighlightColor ;
		$headerTextColorAttrib = '';
		if ($this->HeaderTextColor != '')
			$headerTextColorAttrib= 'color=' . $this->HeaderTextColor;
		$borderColorAttrib = '';
		$headerColorAttrib = '';
		if ($this->BorderColor != '')
		{
			$borderColorAttrib= 'bordercolor=' . $this->BorderColor;
			$headerColorAttrib= 'bgcolor=' . $this->BorderColor;
		}
		$fontFaceAttrib = '';
		if ($this->FontFace != '')
			$fontFaceAttrib= 'face="' . $this->FontFace . '"';
		$fontSizeAttrib = '';
		if ($this->FontSize != '')
			$fontSizeAttrib= 'size="' . $this->FontSize . '"';
		if ($this->HeaderFontSize == '')
		{
			if ($this->FontSize != '')
				$this->HeaderFontSize = $this->FontSize + 1;
			else
				$this->HeaderFontSize = '+1';
		}

		print "<table $widthAttrib cellpadding=\"2\" cellspacing=\"0\" border=\"0\">\n";
		print "<tr><td align=\"left\">\n";
		$link = $this->QueryPage;

		if ($this->DisplayNewSearchLink)
		{
			print "&nbsp;<a href=\"$link\">";
			PPrint($this->_STRINGS['NEW SEARCH'], $this->FontFace, $this->FontSize, $this->BodyTextColor);
			print "</a>";
		}
		foreach ($this->OtherDisplayPages as $pagename => $pagelink)
		{
			$link = "$pagelink?irn=" . $this->IRN . "&amp;QueryPage=" . urlencode($this->QueryPage);
			PPrint(' | ', $this->FontFace, $this->FontSize, $this->BodyTextColor);
			print "<a href=\"$link\">";
			PPrint($pagename, $this->FontFace, $this->FontSize, $this->BodyTextColor);
			print "</a>";
		}

		print "</td>\n";
		print "</tr><tr><td colspan=\"2\">\n";
		$decorator = new HtmlBoxAndTitle;
		$decorator->BorderColor = $this->BorderColor;
		$decorator->BodyColor = $this->BodyColor;
		$decorator->TitleTextColor = $this->HeaderTextColor;
		$decorator->FontFace = $this->FontFace;
		$decorator->Width = "100%";
		$decorator->Title = $this->record->{$this->HeaderField};
		$decorator->Open();

		if ($this->DisplayImage)
			$this->DisplayMedia();

		print "       <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"3\">\n";
		print "<!-- Start Field Content -->\n";

		// Foreach loop on each item in the $this->Fields var
		$i = $fieldNum = 0;
		foreach ($this->Fields as $item)
		{
			$fieldNum++;
			if (is_string($item))
			{
				if (isset($this->_STRINGS[$item]))
					$item = new Field($item, $this->_STRINGS[$item]);
				else
					$item = new Field($item, $item);
			}

			// Don't display if fields security doesn't allow
			if (isset($item->ValidUsers) 
				&& strtolower($item->ValidUsers) != 'all')
			{
				if (! $this->SecurityTester->UserIsValid($item->ValidUsers))
					continue;
			}

			// If it's a backreference item, then load data
			$this->_loadBackReferenceField($item);

			if (! $this->SuppressEmptyFields || $this->_hasData($item))
			{
				$i++;
				if ($fieldNum == 1)
					continue; // ignore first field as it's used in heading
				if ($i % 2 == 0)
					print "	<tr $highlightColorAttrib align=\"left\" valign=\"top\">\n";
				else
					print "	<tr align=\"left\" valign=\"top\">\n";
					
				// Print field name
				if ($item->Label != '')
					$label = $item->Label;
				elseif ($item->Name != '')
				{
					if (isset($this->_STRINGS[$item->Name]))
						$label = $this->_STRINGS[$item->Name];
					else
						$label = $item->Name;
				}
				else
				{
					if (isset($this->_STRINGS[$item->ColName]))
						$label = $this->_STRINGS[$item->ColName];
					else
						$label = $this->ColName;
				}

				if ($this->DisplayLabels)
				{
					print "	  <td width=\"160\"><b>";
					print "<font $bodyTextColorAttrib $fontFaceAttrib $fontSizeAttrib>";
					print $label;
					print "</font></b></td>\n"; 
				}
				else
				{
					print "	  <td>&nbsp;</td>\n";
				}


				print "	  <td>\n";
				$this->adjustOutput($item);
				print "</td>\n";
				print "	</tr>\n";
			}
		}

		
		// Print the extra multimedia
		$firstImage = ($this->DisplayImage) ? 2 : 1;
			
		$hasMedia = isset($this->record->{"MulMultiMediaRef:$firstImage"});
		if ($this->DisplayAllMedia && $hasMedia)
		{
			if ($i % 2 == 0)
				print "	<tr align=\"left\" valign=\"top\">\n";
			else
				print "	<tr $highlightColorAttrib align=\"left\" valign=\"top\">\n";

			// Print field name (This will normally be multimedia)
			if ($this->DisplayLabels)
			{
				print "	  <td width=\"160\"><b><font $bodyTextColorAttrib $fontFaceAttrib $fontSizeAttrib>".
						$this->_STRINGS['MEDIA'] . "</font></b></td>\n"; 
			}

			// Display Images
			print "	  <td>\n";
			print "<!-- Start a table of thumbnails -->\n";
			print "<table border=\"0\" cellpadding=\"3\"><tr>\n";
			$i = $firstImage;
			$imgcount = 0;
			$mmField = "MulMultiMediaRef:$i"; 
			$publishField = "AdmPublishWebNoPasswordLocal:$i"; 
			$imgirn = $this->record->$mmField;
			$publish = $this->record->$publishField;
			
			while ($imgirn != '')
			{
				if (strtolower($publish) == "yes")
				{
					if ($this->ImagesPerRow > 0 && ($imgcount % $this->ImagesPerRow == 0))
						print "</tr><tr>";

					print "<td align=\"center\">";
					$image = new MediaImage;
					$image->Intranet = $this->Intranet;
					$image->IRN = $imgirn;
					$image->BorderColor = $this->BorderColor;
					if ($this->SuppressImageBorders)
						$image->ShowBorder = 0;
					$image->HighLightColor = $this->BorderColor;
					$image->RefIRN = $this->IRN;
					$image->RefTable = $this->Database;
					$image->UseAbsoluteLinks = $this->UseAbsoluteLinks;
					$image->KeepAspectRatio = $this->KeepAssociatedImagesAspectRatio;
					$image->Width = 60;
					$image->Height = 60;
					if ($this->ImageDisplayPage != "")
					{
						$image->ImageDisplayPage = $this->ImageDisplayPage;
					}
					elseif($this->Intranet)
					{
						$image->ImageDisplayPage = $GLOBALS['INTRANET_DEFAULT_IMAGE_DISPLAY_PAGE'];
					}	
					else
					{
						$image->ImageDisplayPage = $GLOBALS['DEFAULT_IMAGE_DISPLAY_PAGE'];
					}
					$image->Show();
					$imgcount++;
					print "</td>";
				}

				$i++;
				$mmField = "MulMultiMediaRef:$i"; 
				$publishField = "AdmPublishWebNoPasswordLocal:$i"; 
				$imgirn = $this->record->$mmField;
				$publish = $this->record->$publishField;
			}

			print "</tr></table>";
			print "</td></tr>\n";
		}
		print "       </table>\n";
		print "<!-- End Field Content -->\n";

		$decorator->Close();

		print "<tr><td align=\"left\">\n";
                $link = $this->QueryPage;

                if ($this->DisplayNewSearchLink)
                {
                        print "&nbsp;<a href=\"$link\">";
                        PPrint($this->_STRINGS['NEW SEARCH'], $this->FontFace, $this->FontSize, $this->BodyTextColor);
                        print "</a>";
                }
                foreach ($this->OtherDisplayPages as $pagename => $pagelink)
                {
                        $link = "$pagelink?irn=" . $this->IRN . "&amp;QueryPage=" . urlencode($this->QueryPage);
                        PPrint(' | ', $this->FontFace, $this->FontSize, $this->BodyTextColor);
                        print "<a href=\"$link\">";
                        PPrint($pagename, $this->FontFace, $this->FontSize, $this->BodyTextColor);
                        print "</a>";
                }

                print "</td></tr>\n";

		print "</td></tr>";
		print "</table>\n";

	}
}

function
filled($column, $db, $irn)
{
	$qry = new ConfiguredQuery();
        $qry->Select = array($column);
        $qry->From = "$db";
        $qry->Where = "irn=" . $irn;
        $records = $qry->Fetch();

	$data = "";
	$data = $records[0]->{"$column"};

	if ($data != "")
		return 1;
	else
		return 0;
}

function
get($column, $db, $irn)
{
	$qry = new ConfiguredQuery();
        $qry->Select = array($column);
        $qry->From = "$db";
        $qry->Where = "irn=" . $irn;
        $records = $qry->Fetch();

	$data = $records[0]->{"$column"};
	return $data;
}

class
NmnhBotanyBotanyPartyDisplay extends BaseStandardDisplay
{

	// Set default field in the constructor
	function
	NmnhBotanyPartyDisplay()
	{
		$this->BaseStandardDisplay();
		// Don't display images by default
		$this->DisplayImage = 0;

		$this->Fields = array(
				'SummaryData',
				'NamTitle',
				'NamFirst',
				'NamMiddle',
				'NamLast',
				'BioBirthPlace',
				'BioDeathPlace',
				'BioEthnicity',
				'NotNotes',
				);
		$this->Database = 'eparties';

	}
}
?>
