<?php
/*
*  Copyright (c) 1998-2006 KE Software Pty Ltd
*/
if (!isset($WEB_ROOT))
	$WEB_ROOT = dirname(dirname(dirname(dirname(realpath(__FILE__)))));
require_once ($WEB_ROOT . '/objects/lib/webinit.php');
require_once ($LIB_DIR . 'BaseDisplayObjects.php');
require_once ($LIB_DIR . 'texquery.php');
require_once ($LIB_DIR . 'media.php');
require_once($WEB_ROOT . '/objects/common/RecordExtractor.php');

$GLOBALS['STRINGS_DIR'] = $WEB_ROOT . "/objects/" . $GLOBALS['BACKEND_TYPE'] . "/" . $GLOBALS['DEPARTMENT'] . "/strings/";

class
NmnhEntoStandardDisplay extends BaseStandardDisplay
{
	// Keep Aspect Ratio for image on display page
        var $KeepAssociatedImagesAspectRatio = 1;

	// Set default in the constructor
	function
	NmnhEntoStandardDisplay()
	{
		$this->BaseStandardDisplay();

		// Don't display images by default
		$this->DisplayImage = 0;

		$filedAsIdentBy = new FormatField;
		$filedAsIdentBy->Name = 'IdeFiledAsIdentifiedByRef';
		if (filled('IdeFiledAsIdentifiedByRef', 'ecatalogue', $this->IRN))
		{
			$filedAsIdentByRef = get('IdeFiledAsIdentifiedByRef', 'ecatalogue', $this->IRN);
			if (filled('NamOrganisation', 'eparties', $filedAsIdentByRef))
			{ 
				$filedAsIdentBy->Format = '{IdeFiledAsIdentifiedByRef->eparties->NamBriefName}';
				$filedAsIdentBy->Format .= ', ';
				$filedAsIdentBy->Format .= '{IdeFiledAsIdentifiedByRef->eparties->NamOrganisation}';
			}
			else
			{
				$filedAsIdentBy->Format = '{IdeFiledAsIdentifiedByRef->eparties->NamBriefName}';
			}
		}

		$citationTaxonName = new Field;
		$citationTaxonName->Name = 'CitTaxonRef_tab->etaxonomy->WebScientificName';
		$citationTaxonName->ColName = 'CitTaxonRef_tab->etaxonomy->WebScientificName';

		$citationTypeStatus = new Field;
		$citationTypeStatus->ColName = 'CitTypeStatus_tab';

		$typeCitations = new Table;
		$typeCitations->Headings = array('', '');
		$typeCitations->Name = 'TypeCitations';
		$typeCitations->Columns = array($citationTaxonName, $citationTypeStatus);

		// Other identifications name
		$ideOtherQualifiedName = new Field;
		$ideOtherQualifiedName->ColName = 'IdeOtherQualifiedName_tab';

		$ideDateIdentified = new Field;
		$ideDateIdentified->ColName = 'IdeOtherDateIdentified0';

		$ideIdentifiedBy = new Field;
		$ideIdentifiedBy->ColName = 'IdeOtherIdentifiedByRef_tab->eparties->NamBriefName';

		$otherIdentTable = new Table;
		$otherIdentTable->Name = 'IdeOtherQualifiedName_tab';
		$otherIdentTable->Headings = array('Identification', 'Date Identified', 'Identified By');
		$otherIdentTable->Columns = array($ideOtherQualifiedName, $ideDateIdentified, $ideIdentifiedBy);

		// Zoo Sex Table
		$sexStageCount = new Field;
		$sexStageCount->ColName = 'ZooSexStageCount_tab';

		$sexStageModifier = new Field;
		$sexStageModifier->ColName = 'ZooSexStageModifier_tab';

		$sex = new Field;
		$sex->ColName = 'ZooSex_tab';

		$stage = new Field;
		$stage->ColName = 'ZooStage_tab';

		$sexStageTable = new Table;
		$sexStageTable->Name = 'SexAndStage';
		$sexStageTable->Headings = array('Count', 'Modifier', 'Sex', 'Stage');
		$sexStageTable->Columns = array($sexStageCount, $sexStageModifier, $sex, $stage);
		// end Zoo Sex Table

		$specimenCount = new Field;
		$specimenCount->ColName = 'CatSpecimenCount';

		$specimenCountMod = new Field;
		$specimenCountMod->ColName = 'CatSpecimenCountModifier';

		$specimenCountTable = new Table;
		$specimenCountTable->Name = 'ObjectCount';
		$specimenCountTable->Headings = array('', '');
		$specimenCountTable->Columns = array($specimenCount, $specimenCountMod);
		
		// date visited from and date visited to formatting
                $dateCollected = new FormatField;
                $dateCollected->Name = "Date Collected";
		if (filled('BioEventSiteRef', 'ecatalogue', $this->IRN))
		{
			$dateVisitedFrom = "";
			$dateVisitedTo = "";
			$dateVisitedConj = "";

                	$ceref = get('BioEventSiteRef', 'ecatalogue', $this->IRN);
			if (filled('ColDateVisitedFrom', 'ecollectionevents', $ceref))
				$dateVisitedFrom = get('ColDateVisitedFrom', 'ecollectionevents', $ceref);
			if (filled('ColDateVisitedTo', 'ecollectionevents', $ceref))
				$dateVisitedTo = get('ColDateVisitedTo', 'ecollectionevents', $ceref);
			if (filled('ColDateVisitedConjunction', 'ecollectionevents', $ceref))
				$dateVisitedConj = get('ColDateVisitedConjunction', 'ecollectionevents', $ceref);

			if ($dateVisitedFrom != "")
			{
                		if ($dateVisitedFrom != "" && $dateVisitedTo != "" && $dateVisitedConj != "")
                		{
					$dateCollected->Format = "{BioEventSiteRef->ecollectionevents->ColDateVisitedFrom}";
					if ($dateVisitedFrom != $dateVisitedTo)
					{
						$dateCollected->Format .= " {BioEventSiteRef->ecollectionevents->ColDateVisitedConjunction} ";
						$dateCollected->Format .= "{BioEventSiteRef->ecollectionevents->ColDateVisitedTo}";
					}
				}
				elseif ($dateVisitedFrom != "" && $dateVisitedTo != "")
				{
					$dateCollected->Format = "{BioEventSiteRef->ecollectionevents->ColDateVisitedFrom}";
					if ($dateVisitedFrom != $dateVisitedTo)
					{
						$dateCollected->Format .= " - ";
						$dateCollected->Format .= "{BioEventSiteRef->ecollectionevents->ColDateVisitedTo}";
					}
				}
				elseif ($dateVisitedFrom != "")
					$dateCollected->Format = "{BioEventSiteRef->ecollectionevents->ColDateVisitedFrom}";
			}
		}
	
                $aquDepth = new FormatField;
                $aquDepth->Name = 'Depth(m)';
		if (filled('BioEventSiteRef', 'ecatalogue', $this->IRN))
		{
			$depthFromMet = "";
			$depthToMet = "";

			$ceref = get('BioEventSiteRef', 'ecatalogue', $this->IRN);
			if (filled('AquDepthFromMet', 'ecollectionevents', $ceref))
				$depthFromMet = get('AquDepthFromMet', 'ecollectionevents', $ceref);
			if (filled('AquDepthToMet', 'ecollectionevents', $ceref))
				$depthToMet = get('AquDepthToMet', 'ecollectionevents', $ceref);

			if ($depthFromMet != "" || $depthToMet != "")
			{
				if ($depthFromMet != "" && $depthToMet != "")
				{
					$aquDepth->Format = "{BioEventSiteRef->ecollectionevents->AquDepthFromMet}"; 
					if ($depthFromMet != $depthToMet)
					{
						$aquDepth->Format .= " - ";
						$aquDepth->Format .= "{BioEventSiteRef->ecollectionevents->AquDepthToMet}";
					}
				}
				elseif ($depthFromMet != "")
				{
					$aquDepth->Format = "{BioEventSiteRef->ecollectionevents->AquDepthFromMet}";
				}
				else
				{
					$aquDepth->Format = "{BioEventSiteRef->ecollectionevents->AquDepthToMet}";
				}
			}
		}

		$recEx = new RecordExtractor();
                $recEx->ExtractFields(array('IdeCommonNameLocal_tab'));
                $commonNameArray = $recEx->MultivalueFieldAsArray("IdeCommonNameLocal_tab");
                $commonNameDisplayArray = array();
                $commonNameDisplay = "";

                for ($i = 0;$i < count($commonNameArray); $i++)
                {
                        if (! empty($commonNameArray[$i]) && ! in_array($commonNameArray[$i], $commonNameDisplayArray))
                        {
                                array_push($commonNameDisplayArray, $commonNameArray[$i]);
                        }
                }
                foreach ($commonNameDisplayArray as $comName)
                {
                        $commonNameDisplay .= $comName . "\n";
                }

                $commonName = new FormatField;
                $commonName->Format = $commonNameDisplay;
                $commonName->Name = "Common Name(s)";

		$catNumber = new FormatField;
		$catNumber->Format = "{CatPrefix} {CatNumber} {CatSuffix}";
		$catNumber->Name = "CatNumber";

		$this->Fields = array
		(
			'IdeFiledAsQualifiedNameWeb',
			$catNumber,
			'IdeFiledAsQualifiedNameWeb',
			$commonName,
			'CatCollectionName_tab',
			$filedAsIdentBy,
			'IdeFiledAsDateIdentified',
			'IdeFiledAsRef->etaxonomy->ClaFamily',
			'IdeFiledAsRef->etaxonomy->ClaOrder',
			'IdeFiledAsRef->etaxonomy->ClaClass',
			'IdeFiledAsRef->etaxonomy->ClaPhylum',
			'IdeFiledAsRef->etaxonomy->ComName_tab',
			$otherIdentTable, 		
			$typeCitations,
			$specimenCountTable,
			$sexStageTable,
			'ZooPreparation_tab',
			$dateCollected,
			'ColCollectionMethod',
			'BioEventSiteRef->ecollectionevents->AquVesselName',
			'BioEventSiteRef->ecollectionevents->AquCruiseNumber',
			'BioEventSiteRef->ecollectionevents->ExpExpeditionName',
			'ColParticipantRef_tab->eparties->NamFullName',
			'BioEventSiteRef->ecollectionevents->LocSiteStationNumber',
			'BioEventSiteRef->ecollectionevents->LocOcean',
			'BioEventSiteRef->ecollectionevents->LocSeaGulf',
			'BioEventSiteRef->ecollectionevents->LocBaySound',
			'BioEventSiteRef->ecollectionevents->LocCountry',
			'BioEventSiteRef->ecollectionevents->LocProvinceStateTerritory',
			'BioEventSiteRef->ecollectionevents->LocDistrictCountyShire',
			'BioEventSiteRef->ecollectionevents->LocTownship',
			'BioEventSiteRef->ecollectionevents->LocNearestNamedPlace',
			'BioEventSiteRef->ecollectionevents->LocPreciseLocation',
			'BioEventSiteRef->ecollectionevents->AquRiverBasin',
			'BioEventSiteRef->ecollectionevents->LatPreferredCentroidLatDec',
                        'BioEventSiteRef->ecollectionevents->LatPreferredCentroidLongDec',
			$aquDepth,
			'BioMicrohabitatDescription',
			'MulMultiMediaRef_tab->emultimedia->MulDescription_tab',
		);

		$this->HeaderField = 'IdeFiledAsQualifiedNameWeb';
		$this->Database = 'enmnh';
		$this->SuppressEmptyFields = 0;
	}

	function
	Show()
	{
		/*
		**  The Show() method is resposible for sourcing the Language strings
		**  ($this->_STRINGS) and performing the query before calling display().
		*/
		$this->sourceStrings();
		$this->setupSchema();

		if (!isset($this->IRN))
		{
			WebDie('Invalid IRN', 'BaseDisplayObject');
		}

		// we don't grab the Multimedia ref if we are already in Multimedia
		if ($this->Database == "emultimedia")
		{
			$this->_buildSelectArray(array('irn', 'SummaryData'));
		}
		else
		{
			$this->_buildSelectArray(array('irn', 'SummaryData', 'MulMultiMediaRef_tab', 'AdmPublishWebNoPasswordLocal_tab'));
		}
		$this->_buildSelectArray($this->Fields);
		$this->_buildSelectArray($this->AdditionalFields);

		if (count($this->AdditionalFields) > 0)
		{
			$this->Fields = array_merge($this->Fields, $this->AdditionalFields);
		}

		$qry = new ConfiguredQuery;
		$qry->SelectedLanguage = $this->LanguageData;
		$qry->Intranet = $this->Intranet;
		$qry->Select = $this->selectArray;
			

		$qry->From = $this->Database;
		$qry->Where = 'irn=' . $this->IRN;
		$result = $qry->Fetch();

		if (!isset($result[0]->irn_1) || $result[0]->irn_1 == '')
		{
			print "<center>";
			print "<h2>";
			PPrint($this->_STRINGS['NO RESULTS'], $this->FontFace, '', $this->BodyTextColor);
			print"</h2>\n";
			print "<h3>";
			PPrint($this->_STRINGS['GO BACK'], $this->FontFace, '', $this->BodyTextColor);
			print "</h3>\n";
			print '<br /></center>';
			return;
		}

		$this->record = $result[0];

		// Now we call the display function
		$this->display();
	}

	function
	display()
	{

		$widthAttrib = '';
		if ($this->Width != '')
			$widthAttrib 	= 'width="' . $this->Width . '"' ;
		$bodyColorAttrib = '';
		if ($this->BodyColor != '')
			$bodyColorAttrib	= 'bgcolor=' . $this->BodyColor;
		$bodyTextColorAttrib = '';
		if ($this->BodyTextColor != '')
			$bodyTextColorAttrib	= 'color=' . $this->BodyTextColor;
		$highlightColorAttrib = '';
		if ($this->HighlightColor != '')
			$highlightColorAttrib	= 'bgcolor=' . $this->HighlightColor ;
		$headerTextColorAttrib = '';
		if ($this->HeaderTextColor != '')
			$headerTextColorAttrib= 'color=' . $this->HeaderTextColor;
		$borderColorAttrib = '';
		$headerColorAttrib = '';
		if ($this->BorderColor != '')
		{
			$borderColorAttrib= 'bordercolor=' . $this->BorderColor;
			$headerColorAttrib= 'bgcolor=' . $this->BorderColor;
		}
		$fontFaceAttrib = '';
		if ($this->FontFace != '')
			$fontFaceAttrib= 'face="' . $this->FontFace . '"';
		$fontSizeAttrib = '';
		if ($this->FontSize != '')
			$fontSizeAttrib= 'size="' . $this->FontSize . '"';
		if ($this->HeaderFontSize == '')
		{
			if ($this->FontSize != '')
				$this->HeaderFontSize = $this->FontSize + 1;
			else
				$this->HeaderFontSize = '+1';
		}

		print "<table $widthAttrib cellpadding=\"2\" cellspacing=\"0\" border=\"0\">\n";
		print "<tr><td align=\"left\">\n";
		$link = $this->QueryPage;

		if ($this->DisplayNewSearchLink)
		{
			print "&nbsp;<a href=\"$link\">";
			PPrint($this->_STRINGS['NEW SEARCH'], $this->FontFace, $this->FontSize, $this->BodyTextColor);
			print "</a>";
		}
		foreach ($this->OtherDisplayPages as $pagename => $pagelink)
		{
			$link = "$pagelink?irn=" . $this->IRN . "&amp;QueryPage=" . urlencode($this->QueryPage);
			PPrint(' | ', $this->FontFace, $this->FontSize, $this->BodyTextColor);
			print "<a href=\"$link\">";
			PPrint($pagename, $this->FontFace, $this->FontSize, $this->BodyTextColor);
			print "</a>";
		}

		print "</td>\n";
		print "</tr><tr><td colspan=\"2\">\n";
		$decorator = new HtmlBoxAndTitle;
		$decorator->BorderColor = $this->BorderColor;
		$decorator->BodyColor = $this->BodyColor;
		$decorator->TitleTextColor = $this->HeaderTextColor;
		$decorator->FontFace = $this->FontFace;
		$decorator->Width = "100%";
		$decorator->Title = $this->record->{$this->HeaderField};
		$decorator->Open();

		if ($this->DisplayImage)
			$this->DisplayMedia();

		print "       <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"3\">\n";
		print "<!-- Start Field Content -->\n";

		// Foreach loop on each item in the $this->Fields var
		$i = $fieldNum = 0;
		foreach ($this->Fields as $item)
		{
			$fieldNum++;
			if (is_string($item))
			{
				if (isset($this->_STRINGS[$item]))
					$item = new Field($item, $this->_STRINGS[$item]);
				else
					$item = new Field($item, $item);
			}

			// Don't display if fields security doesn't allow
			if (isset($item->ValidUsers) 
				&& strtolower($item->ValidUsers) != 'all')
			{
				if (! $this->SecurityTester->UserIsValid($item->ValidUsers))
					continue;
			}

			// If it's a backreference item, then load data
			$this->_loadBackReferenceField($item);

			if (! $this->SuppressEmptyFields || $this->_hasData($item))
			{
				$i++;
				if ($fieldNum == 1)
					continue; // ignore first field as it's used in heading
				if ($i % 2 == 0)
					print "	<tr $highlightColorAttrib align=\"left\" valign=\"top\">\n";
				else
					print "	<tr align=\"left\" valign=\"top\">\n";
					
				// Print field name
				if ($item->Label != '')
					$label = $item->Label;
				elseif ($item->Name != '')
				{
					if (isset($this->_STRINGS[$item->Name]))
						$label = $this->_STRINGS[$item->Name];
					else
						$label = $item->Name;
				}
				else
				{
					if (isset($this->_STRINGS[$item->ColName]))
						$label = $this->_STRINGS[$item->ColName];
					else
						$label = $this->ColName;
				}

				if ($this->DisplayLabels)
				{
					print "	  <td width=\"160\"><b>";
					print "<font $bodyTextColorAttrib $fontFaceAttrib $fontSizeAttrib>";
					print $label;
					print "</font></b></td>\n"; 
				}
				else
				{
					print "	  <td>&nbsp;</td>\n";
				}


				print "	  <td>\n";
				$this->adjustOutput($item);
				print "</td>\n";
				print "	</tr>\n";
			}
		}

		
		// Print the extra multimedia
		$firstImage = ($this->DisplayImage) ? 2 : 1;
			
		$hasMedia = isset($this->record->{"MulMultiMediaRef:$firstImage"});
		if ($this->DisplayAllMedia && $hasMedia)
		{
			if ($i % 2 == 0)
				print "	<tr align=\"left\" valign=\"top\">\n";
			else
				print "	<tr $highlightColorAttrib align=\"left\" valign=\"top\">\n";

			// Print field name (This will normally be multimedia)
			if ($this->DisplayLabels)
			{
				print "	  <td width=\"160\"><b><font $bodyTextColorAttrib $fontFaceAttrib $fontSizeAttrib>".
						$this->_STRINGS['MEDIA'] . "</font></b></td>\n"; 
			}

			// Display Images
			print "	  <td>\n";
			print "<!-- Start a table of thumbnails -->\n";
			print "<table border=\"0\" cellpadding=\"3\"><tr>\n";
			$i = $firstImage;
			$imgcount = 0;
			$mmField = "MulMultiMediaRef:$i"; 
			$publishField = "AdmPublishWebNoPasswordLocal:$i"; 
			$imgirn = $this->record->$mmField;
			$publish = $this->record->$publishField;
			
			while ($imgirn != '')
			{
				if (strtolower($publish) == "yes")
				{
					if ($this->ImagesPerRow > 0 && ($imgcount % $this->ImagesPerRow == 0))
						print "</tr><tr>";

					print "<td align=\"center\">";
					$image = new MediaImage;
					$image->Intranet = $this->Intranet;
					$image->IRN = $imgirn;
					$image->BorderColor = $this->BorderColor;
					if ($this->SuppressImageBorders)
						$image->ShowBorder = 0;
					$image->HighLightColor = $this->BorderColor;
					$image->RefIRN = $this->IRN;
					$image->RefTable = $this->Database;
					$image->UseAbsoluteLinks = $this->UseAbsoluteLinks;
					$image->KeepAspectRatio = $this->KeepAssociatedImagesAspectRatio;
					$image->Width = 60;
					$image->Height = 60;
					if ($this->ImageDisplayPage != "")
					{
						$image->ImageDisplayPage = $this->ImageDisplayPage;
					}
					elseif($this->Intranet)
					{
						$image->ImageDisplayPage = $GLOBALS['INTRANET_DEFAULT_IMAGE_DISPLAY_PAGE'];
					}	
					else
					{
						$image->ImageDisplayPage = $GLOBALS['DEFAULT_IMAGE_DISPLAY_PAGE'];
					}
					$image->Show();
					$imgcount++;
					print "</td>";
				}

				$i++;
				$mmField = "MulMultiMediaRef:$i"; 
				$publishField = "AdmPublishWebNoPasswordLocal:$i"; 
				$imgirn = $this->record->$mmField;
				$publish = $this->record->$publishField;
			}

			print "</tr></table>";
			print "</td></tr>\n";
		}
		print "       </table>\n";
		print "<!-- End Field Content -->\n";

		$decorator->Close();

		print "<tr><td align=\"left\">\n";
                $link = $this->QueryPage;

                if ($this->DisplayNewSearchLink)
                {
                        print "&nbsp;<a href=\"$link\">";
                        PPrint($this->_STRINGS['NEW SEARCH'], $this->FontFace, $this->FontSize, $this->BodyTextColor);
                        print "</a>";
                }
                foreach ($this->OtherDisplayPages as $pagename => $pagelink)
                {
                        $link = "$pagelink?irn=" . $this->IRN . "&amp;QueryPage=" . urlencode($this->QueryPage);
                        PPrint(' | ', $this->FontFace, $this->FontSize, $this->BodyTextColor);
                        print "<a href=\"$link\">";
                        PPrint($pagename, $this->FontFace, $this->FontSize, $this->BodyTextColor);
                        print "</a>";
                }

                print "</td></tr>\n";

		print "</td></tr>";
		print "</table>\n";

	}
}

function
filled($column, $db, $irn)
{
        $qry = new ConfiguredQuery();
        $qry->Select = array($column);
        $qry->From = "$db";
        $qry->Where = "irn=" . $irn;
        $records = $qry->Fetch();

        $data = "";
        $data = $records[0]->{"$column"};

        if ($data != "")
                return 1;
        else
                return 0;
}

function
get($column, $db, $irn)
{
        $qry = new ConfiguredQuery();
        $qry->Select = array($column);
        $qry->From = "$db";
        $qry->Where = "irn=" . $irn;
        $records = $qry->Fetch();

        $data = $records[0]->{"$column"};
        return $data;
}

class
NmnhEntoPartyDisplay extends BaseStandardDisplay
{
	function
	NmnhEntoPartyDisplay()
	{
		$this->BaseStandardDisplay();
		$this->DisplayImage = 0;

		$this->Fields = array
		(
			'SummaryData',
			'NamTitle',
			'NamFirst',
			'NamMiddle',
			'NamLast',
			'BioBirthPlace',
			'BioDeathPlace',
			'BioEthnicity',
			'NotNotes',
		);
		$this->Database = 'eparties';
	}
}
?>
