#!/usr/bin/perl -w

use strict;
$| = 1;

my $Prog = $0 =~ m:[^/]*$: ? $& : $0;

my $dest_server;
my $dest_env;
my $resource;
my $destination;

# Directory names
my $digir_query_dir = "digirqry";
my $texql_expect_dir = "texqlexpect";

# Log file path
my $log = "$ENV{'EMUPATH'}/web/tmp/log/digir_texql_generated.log";

my $debug_level = 4;
my $verbose = 0;

my @digir_request_files;
my $digir_request_file;

my $digir_request;
my $digir_result;

my $digir_generated_texql;
my %generated_select_columns;
my $generated_select;
my $generated_from;
my $generated_where;
my $generated_from_to;

my $expected_texql_file;
my $expected_texql;
my %expected_select_columns;
my $expected_select;
my $expected_from;
my $expected_where;
my $expected_from_to;

while ( @ARGV )
{
        $_ = shift;
        if ( /^-s(.*)$/ )
        {
                if ($1)
                {
                        $dest_server = $1;
                }
                elsif (@ARGV)
                {
                        $dest_server = shift;
                }
                else
                {
                        Usage();
                }
                next;
        }
        if ( /^-e(.*)$/ )
        {
                if ($1)
                {
                        $dest_env = $1;
                }
                elsif (@ARGV)
                {
                        $dest_env = shift;
                }
                else
                {
                        Usage();
                }
                next;
        }
        if ( /^-r(.*)$/ )
        {
                if ($1)
                {
                        $resource = $1;
                }
                elsif (@ARGV)
                {
                        $resource = shift;
                }
                else
                {
                        Usage();
                }
                next;
        }
        if ( /^-v$/ )
        {
		$verbose = 1;
                next;
        }
        if (/^-/)
        {
                Usage();
        }

	unshift( @ARGV, $_ );
        last;
}

if ( ! defined( $dest_server ) ||
     ! defined( $dest_env ) ||
     ! defined( $resource ) )
{
	Usage();
}

$destination = "http://$dest_server/$dest_env/webservices/digir.php";

if ( @ARGV )
{
	@digir_request_files = @ARGV;
}
else
{
	opendir( DIR, $digir_query_dir ) || die "Error: could not open directory $digir_query_dir: $!";
	@digir_request_files = grep( /^\d+$/, readdir( DIR ) );
	closedir(DIR);

}

foreach my $file ( @digir_request_files )
{
	if ( $file !~ /^$digir_query_dir\// )
	{
		$digir_request_file = "$digir_query_dir/$file";
	}
	else
	{
		$digir_request_file = $file;
	}

	if ( ! -f $digir_request_file )
	{
		print STDERR "Error: $digir_request_file is not a file\n";
		next;
	}

	###
	### READ BASE DIGIR REQUEST FROM FILE
	###
	Print( "PROCESSING FILE: $digir_request_file\n" );
	open( FILE, "< $digir_request_file" ) || die "Error: could not open file $digir_request_file: $!";
	$digir_request = <FILE>;
	close( FILE );

	###
	### MODIFY BASE REQUEST TO CONFORM TO NEW PARAMETERS
	###
	$digir_request =~ s/resource%3D%...+?%..%3Ehttp%3A%2F%2F.+?%2F.+?%2Fwebservices%2Fdigir\.php/resource%3D%27$resource%27%3Ehttp%3A%2F%2F$dest_server%2F$dest_env%2Fwebservices%2Fdigir.php/;
	$digir_request = "$destination?$digir_request";
	$digir_request =~ s/\n$/&debugLevel=$debug_level/;

	Print( "DiGIR REQUEST\n$digir_request\n" );

	###
	### SEND QUERY
	###
	$digir_result = fireRequest( $digir_request );

	###
	### CHECK RESULTS
	###
	if ( $digir_result =~ /error/i )
	{
		print STDERR "DiGIR ERROR: processing DiGIR request file $digir_request_file\n\n";
		print STDERR "REQUEST:\n$digir_request\n\n";
		print STDERR "RESULT:\n$digir_result\n\n";
		print STDERR "SKIPPING VALIDATION FOR THIS REQUEST...\n\n";
		next;
	}

	Print( "DiGIR RESULT:\n $digir_result\n" );

	###
	### GET THE LAST TEXQL STATEMENT WRITTEN TO THE LOG FILE
	###
	die "Error: could not find file $log" if ( ! -f $log );
	$digir_generated_texql = `tail -1 $log`;
	chomp( $digir_generated_texql );

	###
	### SPLIT THE DIGIR GENERATED TEXQL UP INTO DIFFERENT PARTS FOR EASIER COMPARISON
	###
	$digir_generated_texql =~ s/^.*\(SELECT/(SELECT/;
	if ( $digir_generated_texql =~ /^\(\s*SELECT\s+(.+)\s+FROM\s+(.+)\s+WHERE\s+(.+)\s*\)\s*{(.+)}\s*$/ )
	{
		$generated_select = $1;
		$generated_from = $2;
		$generated_where = $3;
		$generated_from_to = $4;
	}
	else
	{
		print STDERR "VALIDATION ERROR: badly formed texql generated by DiGIR\n\n";
		print STDERR $digir_generated_texql . "\n\n";
		print STDERR "SKIPPING VALIDATION FOR THIS REQUEST...\n\n";
		next;
	}

	#%generated_select_columns = map { s/^\w+\.// ? $_ : $_, undef } ( split( /,\s*/, $generated_select ) );

	###
	### READ IN THE EXPECTED TEXQL
	###
	($expected_texql_file = $file) =~ s/^.*$digir_query_dir\/?//;
	$expected_texql_file = "$texql_expect_dir/$expected_texql_file";
	open( IN, "< $expected_texql_file" ) || die "Error: could not open expected texql file $expected_texql_file: $!";
	$expected_texql = <IN>;
	close( IN );
	chomp( $expected_texql );

	###
	### SPLIT THE EXPECTED TEXQL UP INTO DIFFERENT PARTS FOR EASIER COMPARISON
	###
	if ( $expected_texql =~ /^\(\s*SELECT\s+(.+)\s+FROM\s+(.+)\s+WHERE\s+(.+)\s*\)\s*{(.+)}\s*$/ )
	{
		$expected_select = $1;
		$expected_from = $2;
		$expected_where = $3;
		$expected_from_to = $4;
	}
	else
	{
		print STDERR "VALIDATION ERROR: badly formed expected texql\n\n";
		print STDERR $expected_texql . "\n\n";
		print STDERR "SKIPPING VALIDATION FOR THIS REQUEST...\n\n";
		next;
	}
	#%expected_select_columns = map { s/^\w+\.// ? $_ : $_, undef } ( split( /,\s*/, $expected_select ) );
		
	###
	### COMPARE THE EXPECTED AND THE GENERATED TEXQL PARTS
	###

	###
	### THE SELECT STATEMENT. WE CAN'T VALIDATE THE SELECT COLUMN IN A WAY THAT IS NOT CLIENT
	### SPECIFIC. THE PROBLEM IS THAT SOME DIGIR VALUES ARE BUILT ON THE FLY FROM NON-DWC COLUMN
	### VALUES (e.g. FOR NMNH, THE  DWC field BasisOfRecord IS BUILT USING THE CATALOGUE COLUMN
	### CatObjectType). SO IN THE PRECEDING EXAMPLE THE DIGIR GENERATED TEXQL SELECT STATEMENT
	### INCLUDES THE COLUMN CatObjectType BUT NOT THE COLUMN DarBasisOfRecord. FOR ANOTHER CLIENT
	### THIS MAY NOT BE THE CASE SO WE CANNOT NOT KNOW WHAT THE "EXPECTED" TEXQL SELECT STATEMENT IS.
	###

	if ( $expected_from ne $generated_from ||
	     $expected_where ne $generated_where ||
	     $expected_from_to ne $generated_from_to )
	{
		print STDERR "VALIDATION ERROR: processing DiGIR request file $digir_request_file\n";
		print STDERR "Expected texql and DiGIR generated texql do not match\n\n";
		print STDERR "DiGIR GENERATED TEXQL:\n$digir_generated_texql\n\n";
		print STDERR "EXPECTED TEXQL:\n$expected_texql\n\n";
	}

	Print( "======================================================================================================" );
	Print( "======================================================================================================" );
}
exit 0;
#======================================================================================================
#======================================================================================================
sub 
Print
{
	my $mesg = shift;

	return if ( ! $verbose );

	print $mesg . "\n";
}
#======================================================================================================
#======================================================================================================
sub 
fireRequest
{
	my $request = shift;
	my $result;
	my $command;

	chomp( $request );

	$command = "wget -O - \"$request\" 2>/dev/null";

	$result = `$command`;
	if ( $? != 0 )
	{
		die "Error: running command: $command";
	}
	return $result;
}
#======================================================================================================
#======================================================================================================
sub
Usage
{
        print STDERR <<EOF;
Usage: $Prog [-v] -s server -e environment -r resource [file]
Where
	-v			Verbose mode
	-s server 		Name of server to send digir request to (e.g. acsmith.si.edu)
	-e environment 		Name of web environment on server (e.g. vzbirdsweb)
	-r resource code 	The resource code used to identify the DiGIR service (e.g. NMNH-VZBirds)
	file			File containing DiGIR query to test (default: all files in ./$digir_query_dir directory)
	
EOF
        exit ( 1 );
}

