<?php
/*
*  Copyright (c) KE Software Pty Ltd - 2009
*/
if (!isset($WEB_ROOT))
	$WEB_ROOT = dirname(dirname(dirname(realpath(__FILE__))));
require_once ($WEB_ROOT . '/objects/lib/webinit.php');
require_once ($LIB_DIR . 'BaseQueryForms.php');

/**
 *
 * These classes produce simplified, unstyled html, removing inline style of
 * the older classes they inherit from.
 *
 **/


/*
 *********** Basic Query Class ***********************
 */
class AmBasicQueryForm extends BaseBasicQueryForm
{
	var $formAttributes = "";

	var $Options = array(
		'anywhere' => 'BioMicrohabitatDescription|CatRegNumber|CitTypeStatus_tab|DeaDeaccessionMethod|ExtendedData|LocSiteLocal|LocSubstrate|MetClass|MetGroup|MetName|MetTypeSymbol|MinClass|MinColor|MinCut|MinGroup|MinSpecies|MinVariety|ObjKeywords_tab|ObjLabel|ProCollectionArea|ProCountry_tab|ProPlace|ProStateProvince_tab|QuiHabitat_tab|QuiLatLongDetermination|QuiPreciseLocationLocal_tab|QuiTaxonLocal|QuiTaxonomyClass|QuiTaxonomyFamily|QuiTaxonomyGenus|QuiTaxonomyOrder|QuiTaxonomyPhylum|QuiTaxonomySpecies|RocClass|RocRockName|SumArchSiteName|SumCategory|SumItemName|TekDescription|TekName|TekShape|ZooSex_tab|ZooStage_tab',
		'taxonomy' => 'QuiTaxonomyClass|QuiTaxonomyFamily|QuiTaxonomyGenus|QuiTaxonomyOrder|QuiTaxonomyPhylum|QuiTaxonomySpecies|QuiTaxonLocal',
		'summary' => 'ExtendedData',
		'habitat' => 'QuiHabitat_tab|BioMicrohabitatDescription',
		'site/collection'	=> 'LocSubstrate|QuiLatLongDetermination|QuiPreciseLocationLocal_tab|LocSiteLocal|ProPlace|ProCollectionArea|ProCountry_tab|ProStateProvince_tab',
		'anthropology'		=> 'SumItemName|ObjKeywords_tab|ObjLabel|DeaDeaccessionMethod|SumArchSiteName|ProCollectionArea|ProCountry_tab|ProPlace|ProStateProvince_tab|ProStateProvince_tab',
		'meteorite'		=> 'MetClass|MetGroup|MetName|MetTypeSymbol',
		'mineral'		=> 'MinClass|MinColor|MinCut|MinGroup|MinSpecies|MinVariety',
		'rock'			=> 'RocClass|RocRockName',
		'tektite'		=> 'TekDescription|TekName|TekShape',
	);

	function display()
	{
		// override default EMuWeb Query Object - make it simple
		// unstyled html with css classes

		$_hidden = array();
		foreach($this->Options as $option => $fields)
		{
			$_hidden[] = "<input type='hidden' name='$option' value='$fields' />";
		}	
		$hidden = implode("\n",$_hidden);


		$_additional = array();
		if (count($this->Options) > 1)
		{
			$_additional[] = "<select name='QueryOption' class='queryOptions searchInput'>";

			// Show Options in dropdown
			// The "options" should not contain spaces.  If a space or "special" label is
			// required, define an entry in the strings file with an ID the same name as
			// the option.
			$spaceerror = 0;
			foreach($this->Options as $option => $val)
			{
				if (preg_match("/\s/", $option))
				{
					$spaceerror++;
				}
				$optDisplay = $this->_STRINGS['QUERY_OPTION_' . strtoupper($option)];
				if ($optDisplay == '')
				{
					$optDisplay = $this->_STRINGS[$option];
				}
				if ($optDisplay == '')
				{
					$optDisplay = $option;
				}
				
				$_additional[] = "\t\t\t\t\t<option value='$option'>$optDisplay</option>";
			}
			$_additional[] =  "\t\t\t\t</select>";
		}
		else
		{
			$option = array_keys($this->Options);
			$option = $option[0];
			$_additional[] = "<input type='hidden' name='QueryOption' value='$option' />";
		}
		$additional = implode("\n",$_additional);

		$self = isset($GLOBALS['REQUEST_URI']) 
				? $GLOBALS['REQUEST_URI'] : $_SERVER['REQUEST_URI'];

		$form = $this->ResultsListPage;
		print("
		<div class='emuWebObject'>
			<form method='post' action='$form' class='emuWebForm' $this->formAttributes >
				<div class='searchPromptAndInput'>
					<div class='searchPrompt'>Search For:</div>
					<input type='text' name='QueryTerms' class='searchInput' />
					$additional
				</div>	

				<div class='submit'>
					<input type='submit' name='search' value='Search' />
				</div>	

				<input type='hidden' name='QueryName' value='BasicQuery' />
				<input type='hidden' name='QueryPage' value='$self' />
				<input type='hidden' name='Restriction value='$this->Restriction' />
				<input type='hidden' name='StartAt' value='1' />
				$hidden
  			</form>
		</div>	
		");
	}




}


/*
 *********** Advanced Query Class ********************
 */
class AmAdvancedQueryForm extends BaseAdvancedQueryForm
{
	var $formAttributes = "";

	var $Options = array(
		'anywhere' => 'BioMicrohabitatDescription|CatRegNumber|CitTypeStatus_tab|DeaDeaccessionMethod|ExtendedData|LocSiteLocal|LocSubstrate|MetClass|MetGroup|MetName|MetTypeSymbol|MinClass|MinColor|MinCut|MinGroup|MinSpecies|MinVariety|ObjKeywords_tab|ObjLabel|ProCollectionArea|ProCountry_tab|ProPlace|ProStateProvince_tab|QuiHabitat_tab|QuiLatLongDetermination|QuiPreciseLocationLocal_tab|QuiTaxonLocal|QuiTaxonomyClass|QuiTaxonomyFamily|QuiTaxonomyGenus|QuiTaxonomyOrder|QuiTaxonomyPhylum|QuiTaxonomySpecies|RocClass|RocRockName|SumArchSiteName|SumCategory|SumItemName|TekDescription|TekName|TekShape|ZooSex_tab|ZooStage_tab',


		'taxonomy' => 'QuiTaxonomyClass|QuiTaxonomyFamily|QuiTaxonomyGenus|QuiTaxonomyOrder|QuiTaxonomyPhylum|QuiTaxonomySpecies|QuiTaxonLocal',
		'summary' => 'ExtendedData',
		'habitat' => 'QuiHabitat_tab|BioMicrohabitatDescription',
		'site/collection'	=> 'LocSubstrate|QuiLatLongDetermination|QuiPreciseLocationLocal_tab|LocSiteLocal|ProPlace|ProCollectionArea|ProCountry_tab|ProStateProvince_tab',
		'anthropology'		=> 'SumItemName|ObjKeywords_tab|ObjLabel|DeaDeaccessionMethod|SumArchSiteName|ProCollectionArea|ProCountry_tab|ProPlace|ProStateProvince_tab|ProStateProvince_tab',
		'meteorite'		=> 'MetClass|MetGroup|MetName|MetTypeSymbol',
		'mineral'		=> 'MinClass|MinColor|MinCut|MinGroup|MinSpecies|MinVariety',
		'rock'			=> 'RocClass|RocRockName',
		'tektite'		=> 'TekDescription|TekName|TekShape',
	);

	function display()
	{
		// override default EMuWeb Query Object - make it simple
		// unstyled html with css classes
		$self = isset($GLOBALS['PHP_SELF']) 
				? $GLOBALS['PHP_SELF'] : $_SERVER['PHP_SELF'];

		$_hidden = array();
		if ($this->RankCheckbox)
		{
			$hidden[] = '<input type="hidden" name="RankOn" value="AdmWebMetadata" />';
		}

		foreach($this->Options as $option => $fields)
		{
			$_hidden[] = "<input type='hidden' name='$option' value='$fields' />";
		}	
		$hidden = implode("\n",$_hidden);


		$_inputs = array();
		if ($this->RankCheckbox)
		{
			$_inputs[] = "<input class='searchInput' type='checkbox' name='Rank' value='true' />";
			$_inputs[] = "$this->_STRINGS['RELEVANCE_RANK']";
		}

		if (count($this->Options) > 1)
		{
			$_inputs[] = "<select name='QueryOption' class='queryOptions searchInput'>";

			// Show Options in dropdown
			// The "options" should not contain spaces.  If a space or "special" label is
			// required, define an entry in the strings file with an ID the same name as
			// the option.
			$spaceerror = 0;
			foreach($this->Options as $option => $val)
			{
				if (preg_match("/\s/", $option))
				{
					$spaceerror++;
				}
				$optDisplay = $this->_STRINGS['QUERY_OPTION_' . strtoupper($option)];
				if ($optDisplay == '')
				{
					$optDisplay = $this->_STRINGS[$option];
				}
				if ($optDisplay == '')
				{
					$optDisplay = $option;
				}
				
				$_inputs[] = "<option value='$option'>$optDisplay</option>";
			}
			$_inputs[] = "</select>";
		}
		$inputs = implode("\n",$_inputs);

		$form = $this->ResultsListPage;
		print("
		<div class='emuWebObject'>
			<form method='post' action='$form' class='emuWebForm' $this->formAttributes >

				<div class='searchPromptAndInput'>
					<div class='searchPrompt'>Only Records With Images</div>
					<input type='checkbox' name='ImagesOnly' value='true' class='searchInput'/>
				</div>

				<div class='searchPromptAndInput'>
					<div class='searchPrompt'>Search</div>
					$inputs
				</div>	

				<div class='searchPromptAndInput'>
					<div class='searchPrompt'>With All Words</div>
					<input class='searchInput' type='text' value='' name='AllWords' class='searchInput'/>
				</div>

				<div class='searchPromptAndInput'>
					<div class='searchPrompt'>With Exact Phrase</div>	
					<input class='searchInput' type='text' size='25' value='' name='Phrase' />
				</div>	

				<div class='searchPromptAndInput'>
					<div class='searchPrompt'>With Any Words</div>	
					<input class='searchInput' type='text' size='25' value='' name='AnyWords' />
				</div>	

				<div class='searchPromptAndInput'>
					<div class='searchPrompt'>Without The Words</div>	
					<input class='searchInput' type='text' size='25' value='' name='WithoutWords' />
				</div>	

				<div class='searchPromptAndInput'>
					<div class='searchPrompt'>Sounds Like Words</div>	
					<input class='searchInput' type='text' size='25' value='' name='SoundsLikeWords' />
				</div>	

				<div class='searchPromptAndInput'>
					<div class='searchPrompt'>Results To Show per Page</div>
					<select name='LimitPerPage' class='queryOptions searchInput'>
		 				<option value='5' >5 results</option>
		 				<option value='10' >10 results</option>
		 				<option value='20' >20 results</option>
		 				<option value='50' >50 results</option>
		 				<option value='100' >100 results</option>
                			</select>
				</div>	

				<div class='submit'>
                			<input type='submit' name='search' value='Search' />
				</div>	

				
				<input type='hidden' name='QueryName' value='AdvancedQuery' />
				<input type='hidden' name='QueryPage' value='$self' />
				<input type='hidden' name='Restriction value='$this->Restriction' />
				<input type='hidden' name='StartAt' value='1' />
				$hidden
  			</form>
		</div>	
		");
	}	

}
	

/*
/*********** Detailed Query Class ********************
 */
class AmDetailedQueryForm extends BaseDetailedQueryForm
{
	// override default EMuWeb Query Object - make it simple
	// unstyled html with css classes

	var $Fields = array(
		'BioMicrohabitatDescription',
		'CatRegNumber',
		'CitTypeStatus_tab',
		'DeaDeaccessionMethod',
		'ExtendedData',
		#'IdeDateIdentified0',
		'LocSubstrate',
		'MetClass',
		#'MetCurrentSpecimenWeight',
		'MetGroup',
		'MetName',
		'MetTypeSymbol',
		'MinClass',
		'MinColor',
		'MinCut',
		'MinGroup',
		'MinSpecies',
		'MinVariety',
		'ObjKeywords_tab',
		'ObjLabel',
		'ProCollectionArea',
		'ProCountry_tab',
		'ProPlace',
		'ProStateProvince_tab',
		#'QuiCollBottomDepthFromMet',
		#'QuiCollBottomDepthToMet',
		'QuiHabitat_tab',
		'QuiLatLongDetermination',
		'QuiLatitude0',
		'QuiLongitude0',
		'QuiPreciseLocationLocal_tab',
		'QuiTaxonLocal',
		'QuiTaxonomyClass',
		'QuiTaxonomyFamily',
		'QuiTaxonomyGenus',
		'QuiTaxonomyOrder',
		'QuiTaxonomyPhylum',
		'QuiTaxonomySpecies',
		'QuiTaxonomySubSpecies',
		'RocClass',
		'RocRockName',
		'SqsSiteName',
		'SumArchSiteName',
		'SumCategory',
		'SumItemName',
		'TekDescription',
		'TekName',
		'TekShape',
		'ZooSex_tab',
		'ZooStage_tab',

#????????????
		#'BioEventDateFrom',
		#'BioEventDateTo',
		'ComName_tab',
		'DetRights',
		'DetSubject_tab',
		'EraAMStage',
		'EraAge1',
		'EraAge2',
		'EraEra',
		'LocElevationASLFromMt',
		'LocElevationASLFromMt',
		'MulCreator_tab',
	);

	var $Hints = array(
		'ExtendedData' 			=> '[ eg. Newcastle ]',
		'QuiTaxonomyClass'		=> '[ eg. Malacostraca ]',
		'QuiTaxonomyFamily'		=> '[ eg. Lysiosquillidae ]',
		'QuiTaxonomyGenus'		=> '[ eg. Lysiosquilla ]',
		'QuiTaxonomyOrder'		=> '[ eg. Stomatopoda ]',
		'QuiTaxonomyPhylum'		=> '[ eg. Crustacea ]',
		'QuiTaxonomySpecies'		=> '[ eg. isos ]',
		'QuiTaxonomySubSpecies'		=> '',
		'QuiHabitat_tab'		=> '',
		'CatRegNumber'			=> '[ eg. P.67176 ]',
		'BioMicrohabitatDescription'	=> '',
		'QuiTaxonLocal'			=> '[ eg Epiactis adeliana ]',
		'CitTypeStatus_tab'		=> '[ eg. Holotype ]',
		#'IdeDateIdentified0'		=> '[ eg. 2003 ]', # non text search
		'QuiLatitude0'			=> '',
		'QuiLongitude0'			=> '',
		'LocSubstrate'			=> '[ eg. reef edge ]',
		'QuiLatLongDetermination'	=> '',
		'QuiPreciseLocationLocal_tab'	=> '',
		'MetClass'			=> '',
		#'MetCurrentSpecimenWeight'	=> '',
		'MetGroup'			=> '',
		'MetName'			=> '',
		'MetTypeSymbol'			=> '',
		'MinClass'			=> '',
		'MinColor'			=> '',
		'MinCut'			=> '',
		'MinGroup'			=> '',
		'MinSpecies'			=> '',
		'MinVariety'			=> '',
		'RocClass'			=> '',
		'RocRockName'			=> '',
		'SqsSiteName'			=> '',
		'TekDescription'		=> '',
		'TekName'			=> '',
		'TekShape'			=> '',
		'ZooSex_tab'			=> '[ eg. female ]',
		'ZooStage_tab'			=> '',
#????????????
		#'BioEventDateFrom'		=> '[ eg. ummmm... ]',
		#'BioEventDateTo'		=> '[ eg. ummmm... ]',
		'ComName_tab'			=> '[ eg. ummmm... ]',
		'DetRights'			=> '[ eg. ummmm... ]',
		'DetSubject_tab'		=> '[ eg. ummmm... ]',
		'EraAMStage'			=> '[ eg. ummmm... ]',
		'EraAge1'			=> '[ eg. ummmm... ]',
		'EraAge2'			=> '[ eg. ummmm... ]',
		'EraEra'			=> '[ eg. ummmm... ]',
		'LocElevationASLFromMt'		=> '[ eg. ummmm... ]',
		'LocElevationASLFromMt'		=> '[ eg. ummmm... ]',
		'MulCreator_tab'		=> '[ eg. ummmm... ]',
	);



	function display()
	{
		global $ALL_REQUEST;
		$self = isset($GLOBALS['PHP_SELF']) 
				? $GLOBALS['PHP_SELF'] : $_SERVER['PHP_SELF'];



		$_secondSearch = array();
		if ($this->SecondSearch)
		{
			//add a second search and clear button to the top of the page
			$_secondSearch[] = "<input type='submit' name='Search' value='Search' />";
			$_secondSearch[] = "<input type='reset' name='Reset' value='Clear' />\n";
			if ($this->ImagesOnlyOption == 1)
			{
				$_secondSearch[] = "<input type='checkbox' name='ImagesOnly' value='true' />\n";
				$_secondSearch[] = $this->_STRINGS['ONLY_WITH_IMAGES'];
			}
		}
		$secondSearch = implode("\n",$_secondSearch);


		#$fnSearches = "";
		$fnSearches = $this->makeFieldNameSearches();

		$_limit = array();
		if ($this->ImagesOnlyOption == 1)
		{
			$_limit[] = "<div class='searchPrompt'>" . $this->_STRINGS['ONLY_WITH_IMAGES'] . "</div>\n" .
				"\t\t\t\t<input type='checkbox' name='ImagesOnly' value='true' class='searchInput' />\n" .
				"\t\t\t\t<div class='hint' />\n";
		}
		$limit = implode("\n", $_limit);

		$form = $this->ResultsListPage;
		print("
		<div class='emuWebObject'>
			<script language='JavaScript'>
			<!--
			// some JavaScript to assist with lookup list popup
			function openLookupList(formID, fieldID, LutName, restriction, term)
			{
				var url = '$GLOBALS[LOOKUPLIST_URL]' +
					'?formid=' + formID +
 					'&fieldid=' + fieldID +
 					'&lname=' + LutName +
					'&restriction=' + restriction +
					'&ll=' + term; +
					'&lang=$this->LanguageData';

				window.open(url, 'popupWindow', 'height=500,width=250,location=no,status=no,toolbar=no,scrollbars=yes').focus();
			}
			-->
			</script>
			<form method='post' action='$form' class='emuWebForm' $this->formAttributes >

		 			<div class='submit'>
 						$secondSearch
					</div>

					<div class='searchPromptAndInput'>
						$limit
					</div>

					$fnSearches
					
					<div class='searchPromptAndInput'>
						<div class='searchPrompt'>Results To Show per Page</div>
						<select name='LimitPerPage' class='queryOptions searchInput'>
		 					<option value='5' >5 results</option>
		 					<option value='10' >10 results</option>
		 					<option value='20' >20 results</option>
		 					<option value='50' >50 results</option>
		 					<option value='100' >100 results</option>
                				</select>
					</div>	

					<div class='submit'>
						<input  type='submit' name='Search' value='Search' />
						<input  type='reset' name='Reset' value='Clear' />
					</div>	

					<input type='hidden' name='QueryName' value='DetailedQuery' />
					<input type='hidden' name='StartAt' value='1' />
					<input type='hidden' name='QueryPage' value='$self' />
					<input type='hidden' name='Restriction' value='$this->Restriction' />
				</form> 
			</div>	
			");

	} //end display()

	function makeFieldNameSearches()
	{
		// assembles string of HTML representing field name query
		// controls
		$_fnSearch = array();
		foreach ($this->Fields as $fld)
		{
			// Convert string fields to QueryField objects
			if (is_string($fld))
			{
				$fieldObject = new QueryField;
				$fieldObject->ColName = $fld;
				$fld = $fieldObject;
			}

			// Security
			if (strtolower($fld->ValidUsers) != 'all')
			{
				if (! $this->SecurityTester->UserIsValid($fld->ValidUsers))
					continue;
			}


			$promptColName = $fld->ColName;
			if ($fld->IsLower)
			{
				$promptColName .= "Lower";
			}
			elseif ($fld->IsUpper)
			{
				$promptColName .= "Upper";
			}

			$label = $fld->ColName;
			if (isset($this->_STRINGS[$promptColName]))
			{
				$label = $this->_STRINGS[$promptColName];
			}


			$htmlFieldName = 'col_' . $fld->ColName;
			if (strtolower(get_class($fld)) == 'queryfield')
			{
				$htmlFieldName = 'col';
				switch (strtolower($fld->ColType))
				{
			    		case 'date':
						$htmlFieldName .= '_date';
						break;
			    		case 'float':
						$htmlFieldName .= '_float';
						break;
				    	case 'integer':
						$htmlFieldName .= '_int';
						break;
				    	case 'string':
						$htmlFieldName .= '_str';
						break;
				    	case 'longitude':
						$htmlFieldName .= '_long';
						break;
				    	case 'latitude':
						$htmlFieldName .= 'lat_';
						break;
				    	case 'text':
						$htmlFieldName .= '';
						break;
				}
				if ($fld->IsLower)
				{
					$htmlFieldName .= '_lower_';
				}
				elseif ($fld->IsUpper)
				{
					$htmlFieldName .= '_upper_';
				}
				$htmlFieldName .= '_' . $fld->ColName;
			}
			else
			{
				WebDie('Invalid Field Type - Expected QueryField');
			}

			$hintColName = $fld->ColName;
			if ($fld->IsLower)
			{
				$hintColName .= "Lower";
			}	
			elseif ($fld->IsUpper)
			{
				$hintColName .= "Upper";
			}	


			if (isset($this->DropDownLists[$fld->ColName]))
			{
				$this->generateDropDown($fld->ColName, $htmlFieldName);
			}
			elseif (isset($this->LookupLists[$fld->ColName]))
			{
				$colName = $this->LookupLists[$fld->ColName];
				$restriction = $this->getLookupRestriction($colName);
				$restriction = urlencode($restriction);
				$lookupName = urlencode($colName);

				$_fnSearch[] = "<div class='searchPromptAndInput'>";
				$_fnSearch[] = "\t<div class='searchPrompt'>$label</div>";

				// print picklist/lookuplist image and link
				$_fnSearch[] = "\t\t<input class='searchInput' type='text' value='' name='$htmlFieldName' />";
				$_fnSearch[] = "\t\t<a href='javascript:void(0)' onclick='" .
					"openLookupList('dtlquery',
 						'$htmlFieldName',
 						'$lookupName',
 						'$restriction',
 						dtlquery['$htmlFieldName'].value)" .
						">";
					;
				$imgPath = $GLOBALS['WEB_PICKLIST_GRAPHIC'];
				$_fnSearch[] = "\t\t<img src='$imgPath' /></a>";
				$_fnSearch[] = "\t\t<div class='hint'>" . $this->Hints[$hintColName] . "</div>";
				$_fnSearch[] = "\t</div>";
			}
			else
			{
				$_fnSearch[] = "\n<div class='searchPromptAndInput'>";
				$_fnSearch[] = "\t<div class='searchPrompt'>$label</div>";
				$_fnSearch[] = "\t<input class='searchInput' type='text' value='' name='$htmlFieldName' />";
				$_fnSearch[] = "\t<div class='hint'>" . $this->Hints[$hintColName] . "</div>";
				$_fnSearch[] = "</div>";
			}
		}
		return implode("\n", $_fnSearch);
	}

}

class 
AmNarrativeBasicQueryForm extends AmBasicQueryForm
{
	
	function
	AmNarrativeBasicQueryForm()
	{
		$this->Options = array(
			'anywhere' => 'SummaryData|NarNarrative|DesGeographicLocation_tab',
		);
		$this->ResultsListPage = "NarrativeResultsList.php";
		$this->AmBasicQueryForm();
	}
}

?>
